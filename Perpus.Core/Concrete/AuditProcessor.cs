using Perpus.Core.Abstract;
using Perpus.Core.Entity;
using Perpus.Core.Entity.Base;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Perpus.Core.Concrete
{
    /// <summary>
    /// the default core audit processor
    /// </summary>
    public class AuditProcessor : IAuditProcessor<string>
    {
        #region Private Declaration
        private PerpusConfig _perpusConfig;
        #endregion
        #region Constructor

        public AuditProcessor(IPerpusConfigurationProvider configurationProvider)
        {
            this._perpusConfig = configurationProvider.GetPerpusConfig();
        }
        #endregion

        #region IAuditProcessor
        public virtual string GetCurrentUserId => this._perpusConfig.IsDeveloperMode ? "Dev-Mode" : null;
        public Tuple<IEnumerable<Audit>, IEnumerable<AuditEntry>> AuditSavedEntities(IEnumerable<EntityEntry> Entities)
        {
            //Adopted from https://www.meziantou.net/2017/08/14/entity-framework-core-history-audit-table

            var auditEntries = new List<AuditEntry>();
            var currentUser = GetCurrentUserId;
            foreach (var entry in Entities)
            {
                if (entry.Entity is Audit || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged)
                    continue;

                var auditEntry = new AuditEntry(entry)
                {
                    ObjectType = entry.Entity.ToString()
                };


                //Update datemodified and modified by for the current state
                if (entry.Entity is BaseEntity)
                {
                    var entityObject = (BaseEntity)entry.Entity;
                    switch (entry.State)
                    {
                        case EntityState.Modified:
                            entityObject.DateModified = DateTime.Now;
                            entityObject.ModifiedById = currentUser;
                            auditEntry.AuditActions = AuditActions.Update;
                            break;
                        case EntityState.Added:
                            entityObject.ModifiedById = currentUser;
                            entityObject.CreatedById = currentUser;
                            auditEntry.AuditActions = AuditActions.Create;
                            break;
                        case EntityState.Deleted:
                            auditEntry.AuditActions = AuditActions.Delete;
                            break;
                        default:
                            break;
                    }
                }

                if (_perpusConfig.IsAuditEnable)
                {
                    auditEntry.CreatedById = currentUser;
                    foreach (var property in entry.Properties)
                    {
                        if (property.IsTemporary)
                        {
                            // value will be generated by the database, get the value after saving
                            auditEntry.TemporaryProperties.Add(property);
                            continue;
                        }

                        string propertyName = property.Metadata.Name;
                        if (property.Metadata.IsPrimaryKey())
                        {
                            auditEntry.KeyValues[propertyName] = property.CurrentValue;
                            continue;
                        }

                        switch (entry.State)
                        {
                            case EntityState.Added:
                                auditEntry.NewValues[propertyName] = property.CurrentValue;
                                break;

                            case EntityState.Deleted:
                                auditEntry.OldValues[propertyName] = property.OriginalValue;
                                break;

                            case EntityState.Modified:
                                if (property.IsModified)
                                {
                                    auditEntry.OldValues[propertyName] = property.OriginalValue;
                                    auditEntry.NewValues[propertyName] = property.CurrentValue;
                                }
                                break;
                        }
                    }
                    auditEntries.Add(auditEntry);
                }
            }

            var permanentChanges = auditEntries
                .Where(_ => !_.HasTemporaryProperties)
                .Select(e => e.ToAudit());

            var temporaryChanges = auditEntries.Where(_ => _.HasTemporaryProperties).ToList();

            Tuple<IEnumerable<Audit>, IEnumerable<AuditEntry>> auditedObjects = new Tuple<IEnumerable<Audit>, IEnumerable<AuditEntry>>(permanentChanges, temporaryChanges);
            return auditedObjects;

            // Save audit entities that have all the modifications
            //return auditEntries
            //    .Where(_ => !_.HasTemporaryProperties)
            //    .Select(e => e.ToAudit());

            // keep a list of entries where the value of some properties are unknown at this step
            // return auditEntries.Where(_ => _.HasTemporaryProperties).ToList();


        }

        public IEnumerable<Audit> AuditGeneratedDbValues(IEnumerable<AuditEntry> auditEntries)
        {
            if (_perpusConfig.IsAuditEnable)
            {
                var audits = new List<Audit>();
                if (auditEntries == null || auditEntries.Count() == 0)
                    return null;

                foreach (var auditEntry in auditEntries)
                {
                    // Get the final value of the temporary properties
                    foreach (var prop in auditEntry.TemporaryProperties)
                    {
                        if (prop.Metadata.IsPrimaryKey())
                        {
                            auditEntry.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                        }
                        else
                        {
                            auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;
                        }
                    }

                    // Save the Audit entry
                    audits.Add(auditEntry.ToAudit());
                }

                return audits;
            }
            else
            {
                return null;
            }
        }
        #endregion


    }
}
